import { BaseScene } from "telegraf/typings/scenes"
import { DnevnikContext } from "../types"
import { KeystoneContext } from "@keystone-6/core/types"
import { Scenes, Markup } from 'telegraf'

export function getSelectStudentScene(): BaseScene<DnevnikContext> {
  const selectStudentScene = new Scenes.BaseScene<DnevnikContext>('select_student')

  selectStudentScene.enter(async (ctx) => {
    const students = ctx.session.students

    if (students) {
      const studentKeyboard = Markup.inlineKeyboard(
        students.map((student) => [Markup.button.callback(`${student.firstName} ${student.lastName}, ${student.orgName}, ${student.className}`, `select_${student.id}`)])
      )
      // Need to reply with markdown because this message will be edited within student scene
      await ctx.replyWithMarkdownV2('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:', studentKeyboard)
    } else {
      await ctx.reply('üôÄ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ /start.')
    }
  });

  selectStudentScene.action(/select_(.+)/, async (ctx) => {
    const selectedStudentId = ctx.match[1]
    const students = ctx.session.students

    const selectedStudent = students.find((student) => student.id === selectedStudentId)

    if (selectedStudent) {
        ctx.session.selectedStudentId = selectedStudent.id
        await ctx.scene.enter('student_scene')
    } else {
      await ctx.reply('üôÄ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –≠—Ç–æ –∫—Ä–∞–π–Ω–µ —Å—Ç—Ä–∞–Ω–Ω–æ –û_–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ /start.')
    }
  })

  return selectStudentScene
}
