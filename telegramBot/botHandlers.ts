import { KeystoneContext } from "@keystone-6/core/types"
import { Context, Markup, NarrowedContext } from "telegraf"
import { Message, Update } from "telegraf/typings/core/types/typegram"
import { createTelegramUser, findOrCreateTelegramUser, findTelegramUser, getKeyboardWithLoginButton } from "./botUtils"
import { DnevnikContext, TDnevnikTokens } from "./types"
import dayjs from "dayjs"
import { DnevnikClient } from "../clients/dnevnik/DnevnikClient"
import { DnevnikClientExternalServerError, DnevnikClientUnauthorizedError } from "../clients/dnevnik/DnevnikClientErrors"
import { DEFAULT_TELEGRAM_TOKENS_TTL_SEC } from "../utils/constants"
import { get } from "lodash"

export async function onStart(godContext: KeystoneContext, ctx: Context<{
  message: Update.New & Update.NonChannel & Message.TextMessage;
  update_id: number;
}> & DnevnikContext): Promise<void> {
  const telegramId = String(ctx.from.id)

  const telegramUser = await findTelegramUser(godContext, telegramId)

  if (telegramUser) {
    if (telegramUser.dnevnikAccessToken && telegramUser.dnevnikRefreshToken) {
      // User already registered and has tokens
      await ctx.scene.enter('select_student')
    } else {
      await ctx.reply(`–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫. –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–∂–µ –≤–Ω–∏–∑—É üëá`, getKeyboardWithLoginButton())
    }
  } else {
    await createTelegramUser(godContext, telegramId, ctx.from)
    await ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.from.first_name ?? ctx.from.username ?? '—á–µ–ª–æ–≤–µ–∫'}! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º. –û–Ω –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –¥–Ω–µ–≤–Ω–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login.`)
  }
}

export async function onSendTokens(godContext: KeystoneContext, ctx: NarrowedContext<DnevnikContext, Update.MessageUpdate<Record<"web_app_data", {}> & Message.WebAppDataMessage>>) {
  if (ctx.webAppData) {
    const data = ctx.webAppData.data.json() as TDnevnikTokens
    const telegramId = String(ctx.from.id)
    const telegramUser = await findOrCreateTelegramUser(godContext, telegramId, ctx.from)

    const dnevnikClientWithUserTokens = new DnevnikClient({ accessToken: data.accessToken, refreshToken: data.refreshToken })

    try {
      const newTokens = await dnevnikClientWithUserTokens.refreshTokens()

      await godContext.query.TelegramUser.updateOne({
        where: { telegramId: telegramUser.telegramId },
        data: {
          dnevnikAccessToken: newTokens.accessToken,
          dnevnikAccessTokenExpirationDate: dayjs().add(Number(get(process.env, 'TELEGRAM_TOKENS_TTL_SEC', DEFAULT_TELEGRAM_TOKENS_TTL_SEC)), 'seconds').toISOString(), //newTokens.accessTokenExpirationDate,
          dnevnikRefreshToken: newTokens.refreshToken,
          dnevnikTokensUpdatedAt: dayjs().toISOString(),
        },
      })

      await ctx.reply('–ì–æ—Ç–æ–≤–æ! –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /logout.', Markup.removeKeyboard())
      await ctx.scene.enter('select_student')
    } catch (err) {
      if (err instanceof DnevnikClientUnauthorizedError) {
        await ctx.reply('–ú–º–º, –ø–æ—Ö–æ–∂–µ —á—Ç–æ —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ò–ª–∏ –≤—ã –∏—Ö –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏. –ò–ª–∏ –≤–∑—è–ª–∏ –Ω–µ –∏–∑ —Ç–æ–≥–æ –º–µ—Å—Ç–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑–æ–∫.', getKeyboardWithLoginButton())
      } else if (err instanceof DnevnikClientExternalServerError) {
        await ctx.reply('–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–Ω–µ–≤–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –ö–Ω–æ–ø–∫–∞ –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ.', getKeyboardWithLoginButton())
      } else {
        await ctx.reply('–ü–æ –º–æ–µ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–æ–∫–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', getKeyboardWithLoginButton())
      }
    }
  } else {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—Ç–æ–∫–µ–Ω—ã), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', getKeyboardWithLoginButton())
  }
}

export async function onLogout(godContext: KeystoneContext, ctx: Context<{ message: Update.New & Update.NonChannel & Message.TextMessage; update_id: number; }>) {
  const telegramId = String(ctx.from.id)

  await godContext.query.TelegramUser.updateOne({
    where: { telegramId },
    data: {
      dnevnikAccessToken: '',
      dnevnikAccessTokenExpirationDate: null,
      dnevnikRefreshToken: '',
      dnevnikTokensUpdatedAt: null,
    },
  })

  await ctx.reply('–ß—Ç–æ –∂, —Ç–∞–∫–æ–≤ –ø—É—Ç—å. –Ø —É–¥–∞–ª–∏–ª –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –∏ –±–æ–ª–µ–µ –Ω–µ —Å–º–æ–≥—É –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /login', Markup.removeKeyboard())
}
