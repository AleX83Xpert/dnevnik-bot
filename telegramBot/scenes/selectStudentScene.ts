import { BaseScene } from "telegraf/typings/scenes"
import { DnevnikContext } from "../types"
import { Scenes, Markup } from 'telegraf'
import { fetchFromDnevnik } from "../../utils/dnevnikFetcher"
import { KeystoneContext } from "@keystone-6/core/types"

export function getSelectStudentScene(godContext: KeystoneContext): BaseScene<DnevnikContext> {
  const selectStudentScene = new Scenes.BaseScene<DnevnikContext>('select_student')

  selectStudentScene.enter(async (ctx) => {
    const telegramUser = ctx.telegramUser
    if (telegramUser) {
      // TODO cache result. Add cache settings to fetchFromDnevnik
      const studentsResult = await fetchFromDnevnik({ telegramUser, godContext, ctx, request: { action: 'students' } })

      if (studentsResult && studentsResult.students) {
        if (!studentsResult.isParent) {
          await ctx.reply('–û–π –æ–π, –∫–∞–∂–µ—Ç—Å—è –≤—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å. –ï—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ —á—Ç–æ-—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–æ –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –≤–µ—Ä–Ω–æ?', Markup.removeKeyboard())
        }

        ctx.session.students = studentsResult.students
        if (studentsResult.students.length === 1) {
          // There is no choice if only one student
          ctx.session.selectedStudentId = studentsResult.students[0].id
          // needMessage is true because there is no message (with student choice) to edit in next scene
          await ctx.scene.enter('student_scene', { needNewMessage: true })
        } else {
          const studentKeyboard = Markup.inlineKeyboard(
            studentsResult.students.map((student) => [Markup.button.callback(`${student.firstName} ${student.lastName}, ${student.orgName}, ${student.className}`, `select_${student.id}`)])
          )
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:', studentKeyboard)
        }
      } else {
        await ctx.reply('üôÄ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞: /start.')
      }
    } else {
      await ctx.reply('üôÄ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞: /start.')
    }
  })

  selectStudentScene.action(/select_(.+)/, async (ctx) => {
    const selectedStudentId = ctx.match[1]
    const students = ctx.session.students

    const selectedStudent = students.find((student) => student.id === selectedStudentId)

    if (selectedStudent) {
      ctx.session.selectedStudentId = selectedStudent.id
      await ctx.scene.enter('student_scene')
    } else {
      await ctx.reply('üôÄ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –≠—Ç–æ –∫—Ä–∞–π–Ω–µ —Å—Ç—Ä–∞–Ω–Ω–æ –û_–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ /start.')
    }
  })

  return selectStudentScene
}
